// STEP 1: Updated Prisma Schema (what your schema.prisma should look like)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  // emailVerified DateTime?
  password      String
  // image         String?
  roleId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // CHANGED: Remove the many-to-many Permission relation
  // permissions   Permission[] @relation("PermissionToUser")
  
  // ADDED: Direct user permissions as string array (optional - overrides role permissions)
  permissions   String[]     @default([])

  role          Role         @relation(fields: [roleId], references: [id])
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isSystem    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // REMOVED: Complex junction table relation
  // permissions RolePermission[]
  
  // ADDED: Simple permissions array storing strings like ["article.CREATE", "user.ALL", "SYSTEM.ADMIN"]
  permissions String[]  @default([])
  
  users       User[]
}

// REMOVED: Delete these models entirely
// model RolePermission {
//   id           String     @id @default(cuid())
//   roleId       String
//   permissionId String
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
//   permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
//   role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
//   @@unique([roleId, permissionId])
// }

// model Permission {
//   id          String           @id @default(cuid())
//   name        String           @unique
//   description String?
//   createdAt   DateTime         @default(now())
//   updatedAt   DateTime         @updatedAt
//   roles       RolePermission[]
//   users       User[]           @relation("PermissionToUser")
// }

model AuthorArticle {
  id          String   @id @default(cuid())
  authorId    String
  articleId   String
  authorOrder Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author      Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, articleId])
  @@map("article_authors")
}

model Article {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  abstract        String?
  content         String?
  readTime        Int?
  image           String?
  // images          String[]
  type            ArticleType
  // draft           Boolean           @default(false)
  archived        Boolean           @default(false)
  views           Int               @default(0)
  // doi             String?           @unique
  keywords        String[]
  contentLink     String?
  downloadCount   Int               @default(0) 
  publishedAt     DateTime          @default(now())
  createdAt       DateTime          @default(now()) 
  updatedAt       DateTime          @updatedAt
  issueId         String?
  JournalIssue    JournalIssue?     @relation(fields: [issueId], references: [id])
  // CategoryArticle CategoryArticle[]
  authors         AuthorArticle[]

  carousel        Boolean           @default(false)
  featured        Boolean           @default(false)
}

model CallForPapers {
  id            String   @id @default(cuid())
  title         String
  thematicFocus String
  description   String
  deadline      DateTime // no visibility after deadline
  volume        Int
  issue         String
  year          Int
  fee           String?
  topics        String[]
  contentLink   String?
  publisher     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Author {
  id             String          @id @default(cuid())
  slug           String          @unique
  name           String
  email          String          @unique
  title          String?         // TODO: Add title
  bio            String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  authorArticles AuthorArticle[]
}

model EditorialBoardMember {
  id           String          @id @default(cuid())
  name         String
  designation  String
  bio          String
  image        String
  email        String?
  order        Int
  memberType   BoardMemberType
  archived     Boolean         @default(false)
  expertise    String[]
  linkedin     String?
  orcid        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model JournalIssue {
  id          String    @id @default(cuid())
  volume      Int
  theme       String?
  issue       Int
  year        Int
  publishDate String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Article     Article[]

  @@unique([volume, issue, year])
}

model Media {
  id          String   @id @default(cuid())
  name        String
  url         String
  type        String
  size        Int
  alt         String?
  description String?
  uploadedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  content   String
  type      NotificationType
  priority  Priority         @default(medium)

  linkDisplay  String?
  linkUrl      String?

  expiresAt DateTime? // default to 3 months from now
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum ArticleType {
  blog
  journal
}

enum BoardMemberType {
  Editor
  Advisor
}


enum NotificationType {
  call_for_papers
  // student_competition
  vacancy
  // special_issue
  event
  // announcement
  // publication
  general
}

enum Priority {
  low
  medium
  high
}